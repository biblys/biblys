{#
Copyright (C) 2025 Clément Latzarus

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
#}

{% extends "layout:base.html.twig" %}

{% block title %}
  Payer avec PayPal
{% endblock %}

{% block main %}
  <p>
    <a href="/order/{{ order.slug }}">Commande n° {{ order.id }}</a>
  </p>

  <h1>Payer avec PayPal</h1>

  <div id="paypal-button-container" class="paypal-button-container"></div>

  <p id="result-message"></p>

  <script src="https://www.paypal.com/sdk/js?components=buttons&disable-funding=card&client-id={{ paypal_client_id }}"></script>
  <script type="text/javascript">
    async function createOrderCallback() {
      try {
        const response = await fetch("/api/orders", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          // use the "body" param to optionally pass additional order information
          // like product ids and quantities
          body: JSON.stringify({
            cart: [
              {
                id: "YOUR_PRODUCT_ID",
                quantity: "YOUR_PRODUCT_QUANTITY",
              },
            ],
          }),
        });

        const orderData = await response.json();

        if (orderData.id) {
          return orderData.id;
        } else {
          const errorDetail = orderData?.details?.[0];
          const errorMessage = errorDetail
            ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})`
            : JSON.stringify(orderData);

          throw new Error(errorMessage);
        }
      } catch (error) {
        console.error(error);
        resultMessage(`Could not initiate PayPal Checkout...<br><br>${error}`);
      }
    }

    async function onApproveCallback(data, actions) {
      try {
        const response = await fetch(`/api/orders/${data.orderID}/capture`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const orderData = await response.json();
        // Three cases to handle:
        //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
        //   (2) Other non-recoverable errors -> Show a failure message
        //   (3) Successful transaction -> Show confirmation or thank you message

        const transaction =
          orderData?.purchase_units?.[0]?.payments?.captures?.[0] ||
          orderData?.purchase_units?.[0]?.payments?.authorizations?.[0];
        const errorDetail = orderData?.details?.[0];

        // this actions.restart() behavior only applies to the Buttons component
        if (errorDetail?.issue === "INSTRUMENT_DECLINED" && !data.card && actions) {
          // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
          // recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/
          return actions.restart();
        } else if (
          errorDetail ||
          !transaction ||
          transaction.status === "DECLINED"
        ) {
          // (2) Other non-recoverable errors -> Show a failure message
          let errorMessage;
          if (transaction) {
            errorMessage = `Transaction ${transaction.status}: ${transaction.id}`;
          } else if (errorDetail) {
            errorMessage = `${errorDetail.description} (${orderData.debug_id})`;
          } else {
            errorMessage = JSON.stringify(orderData);
          }

          throw new Error(errorMessage);
        } else {
          // (3) Successful transaction -> Show confirmation or thank you message
          // Or go to another URL:  actions.redirect('thank_you.html');
          resultMessage(
            `Transaction ${transaction.status}: ${transaction.id}<br><br>See console for all available details`,
          );
          console.log(
            "Capture result",
            orderData,
            JSON.stringify(orderData, null, 2),
          );
        }
      } catch (error) {
        console.error(error);
        resultMessage(
          `Sorry, your transaction could not be processed...<br><br>${error}`,
        );
      }
    }

    window.paypal.Buttons({
        createOrder: createOrderCallback,
        onApprove: onApproveCallback,
      })
      .render("#paypal-button-container");

    // Example function to show a result to the user. Your site's UI library can be used instead.
    function resultMessage(message) {
      const container = document.querySelector("#result-message");
      container.innerHTML = message;
    }
  </script>
{% endblock %}